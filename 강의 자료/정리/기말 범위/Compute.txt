▶ 텍스쳐를 두 개 합쳐서 하나의 텍스쳐로 만드는 프로그램을 만든다고 할 때
일단 합치는데는 2중 for문을 써야 함
애초에 Output은 read밖에 안됨

▶ 비디오 메모리
응용 프로그램에서 비디오 메모리의 내용을 읽는 연산은 매우 느림
원래는 CPU에서 비디오 메모리로 옮기는 것을 Set 이라고 했음
Set은 개느림

▶ 컴퓨트 셰이더
▷ RWTexture2D<float4> gtxRWOutput : register(u3)
2중 for문 돌려야 할거 GPU를 통해 빠르게 가능
Read Write 모두 가능
GPGPU 프로그래밍 제공
스레드는 계산 셰이더의 기본 처리 단위
Dispatch: 지금부터 병렬 처리 작업 시~작

▶ 셰이더 모델 5
읽기 쓰기가 모두 가능한 리소스는 앞에 RW를 붙여 사용
픽셀 셰이더와 컴퓨트 셰이더만 사용 가능
픽셀 셰이더는 보통 안쓰지만 컴퓨트 셰이더는 기본으로 사용

▶ 구조화 버퍼
RW 리소스들은 UAV를 만들고 u레지스터를 사용

▶ 루트 시그니쳐
그래픽스 루트 시그니쳐랑 똑같은 컴퓨트 루트 시그니쳐 만들어줌
CreateComputePipelineState

▶ 컴퓨트 셰이더 데이터 전달
SetComputeRootUnorderedAccessView 만 잘 신경 쓰고 나머지는 그래픽스 함수와 동일

▶ Dispatch(x, y, z): 해당 방향으로 디스패치될 그룹의 개수, 스레드 그룹의 크기를 정의, 65535보다 작아야 함

▶ [numthreads(n, m, l)]
하나의 스레드 그룹의 스레드 개수(최대 1024개)
각 스레드 그룹은 n * m * l개의 스레드로 구성

▶ SV_GroupThreadID
스레드 그룹에서 계산셰이더가 실행되고 있는 스레드의 인덱스

▶ SV_GroupID
계산 셰이더가 실행하고 있는 스레드 그룹의 인덱스

▶ SV_DispatchThreadID
계산 셰이더가 실행하고 있는 스레드와 스레드 그룹이 결합된 인덱스

▶ SV_GroupIndex
하나의 스레드 그룹에서 스레드의 인덱스

▶ GPU 메모리에서 시스템 메모리로 리소스 복사
① CPU에서 읽을 수 있는 버퍼 생성 D3D_HEAP_TYPE_READBACK
② ID3D12GraphicsCommandList::CopyResource()로 리소스를 버퍼로 복사
③ 버퍼를 Map하여 읽음

▶ 공유 메모리 동기화
GroupMemoryBarrierWithGroupSync
스레드 그룹의 모든 그룹 공유 접근이 끝날 때까지 그리고 그룹의 모든 스레드가 이 함수를 호출할 때까지 각 스레드의 실행을 멈추고 기다림
GroupMemoryBarrier: 모든 그룹 공유 접근이 끝날 때까지 하나의 스레드 그룹의 모든 스레드의 실행을 멈추고 기다림