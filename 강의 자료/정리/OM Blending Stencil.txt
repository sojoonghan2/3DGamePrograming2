▶ 출력-병합 단계
최종적으로 픽셀의 색상을 생성하여 렌더 타겟으로 출력하는 단계

▶ 블렌딩
여러 개의 픽셀 값을 결합하여 하나의 최종 픽셀 색상을 생성
렌더 타겟의 색상과 픽셀 쉐이더의 출력 색상을 결합하여 최종 색상을 결정

▶ 텍스쳐 블렌딩
렌더 타겟에는 알파값이 없음(모니터에 알파값이 없듯이)
리소스는 알파값이 있음
소스 칼라: 픽셀 쉐이더의 리턴 색상
타겟 칼라: 렌더 타겟에 이미 그려져 있는 색상
그 둘을 섞는 것이 블렌딩
블렌딩: 다중-패스 렌더링
다중 텍스쳐링: 하나의 정점이 여러 개의 텍스쳐 좌표를 가지면 여러 텍스쳐 매핑 가능, 쉐이더에서 해결(단일-패스 렌더링)

▶ 알파 블렌딩
RS 단계에서 색상/알파 값 보간
투명 효과
정점의 색상, 재질의 색상, 텍스쳐 색상

▶ OM 블렌딩
블렌드 상태를 설정
D3D12_BLEND_DESC 구조체를 사용해서 설정(렌더 타겟 8개에 대해 설정)
BlendEnable
SrcBlend: 픽셀 색상에 곱하는 값
DestBlend: 렌더 타겟 색상에 곱하는 값
BlendOp: RGB 색상 블렌드 연산자
상태 설정 함수: OMSetBlendFactor

▶ 다중 샘플링(Multi-Sampling)
포함 여부(Coverage): 각 서브 픽셀의 중심이 다각형 내부에 존재하는가? 테스트 할 필요 있음

▶ 알파-커버리지 다중 샘플링
이미 투명한 텍스쳐는 알파 값으로 잘 되어있으므로 이 알파값을 사용하여 계산
AlphaToCoverateEnable: 내부적으로 Coverage 테스트를 안하겠음

▶ 텍스쳐 스플래팅
타일 형태의 텍스쳐 레이어 사용해서 렌더링
텍스쳐 여러 개 사용해서 이쁘게 매핑 가능

▶ 고려
빌보드가 아닌 경우 은면제거 X
Color = SrcColor * 1 + DestColor * SrcAlpha

▶ 렌더링 순서
투명한 다각형들은 카메라까지의 거리에 따라 정렬
카메라에서 거리가 먼 다각형 먼저 렌더링
블렌딩 연산이 더하기, 빼기, 곱하기 중 하나가 아닌 경우 기본적으로 정렬이 필요함

▶ 안개
결과 = 안개 인자 * 안개 적용 전 색상 + (1 - 안개 인자) * 안개 색상
정점 안개는 카메라 좌표계의 Z값을 사용하면 카메라 회전 시 문제 발생 가능

▶ 스텐실 검사
각 픽셀에 대해 스텐실 버퍼에 미리 저장된 값과 참조 값(reference value)을 비교하여 테스트를 수행
렌더  타겟 일부 영역을 렌더링 하지 않게 설정
거울 반사 표현 예
깊이 검사와 스텐실 검사 모두 통과해야 렌더링 됨(True, True)
하나만 성공했으면, 성공한 쪽의 갱신은 일어날 수 있음
검사 On 안해두면 성공한 것으로 취급

▶ 깊이-스텐실 상태
typedef struct D3D12_DEPTH_STENCIL_DESC
BOOL StencilEnable: 스텐실 검사 활성화
UINT8 StencilReadMask: 스텐실 버퍼 읽기 매스크
UINT8 StencilWriteMask: 스텐실 버퍼 쓰기 매스크
D3D12_DEPTH_STENCILOP_DESC FrontFace: 전면 다각형 스텐실 버퍼 갱신
D3D12_DEPTH_STENCILOP_DESC BackFace: 은면 다각형 스텐실 버퍼 갱신

typedef struct D3D12 DEPTH_STENCILOP_DESC
D3D12_COMPARISON_FUNC StencilFunc: 스텐실 테스트시 비교 연산 정의

typedef enum D3D12_STENCIL_OP
KEEP, ZERO, REPLACE, INCR_SAT, DECR_SAT, INVERT, INCR, DECR

스텐실 참조 값 
OMSetStencilRef(UINT StencilRef); // 참조값

▶ 평면 거울 구현
- 거울 세상
1. 거울 평면에 반사된 객체 구함
2. 조명 있으면 반사된 조명 구함
3. 반사된 객체 그림
- 실세계
1. 거울 평면에 반사된 객체 구함
2. 조명이 있으면 반사된 조명 구함
3. 거울에만 그려지도록 스텐실 설정
4. 반사된 객체 그림

거울 세상의 경우에는 좌/우 앞면/뒷면이 바뀜(조명 구조체에서 위치와 방향이 바뀜)
순서
1. 거울을 제외한 모든 객체 렌더링, 거울을 렌더링 하기 위해 파이프라인 상태가 4개 필요함
2-1. 스텐실 버퍼 초기화(0)
2-2. 거울을 스텐실 버퍼에 렌더링(렌더 타겟에는 출력X)
3-1. 반사된 객체들 거울에 렌더링
3-2. 거울에 반사된 조명 위치와 방향 반영
3-3. 반사된 객체 렌더링(반사 조명 사용)
4. 거울을 렌더링(블렌딩)